/---------------------------------------------------------------------------------------------------/
/                                                                                                   /
/                                       C H A P I T R E  3                                          /
/                                                                                                   /
/---------------------------------------------------------------------------------------------------/

1/ symfony new project_name --version=num_version
2/ code project_name pour ouvrir dans vsCode le dossier 
3/ Les seuls élements qui nous interessent sont : "src" et "config" // 
4/ Public est le dossier au public, cad le point d'entrée, c'est le front controller (index.php)
5/ "php bin/console" permet d'avoir une liste de commande que l'on peut taper et important de regarde ce qu'il s'y trouve

6/ php -S localhost:8000 -t public  (===> IMPORTANT de rajouter -t public pour le lancer a partir de ce fichier)
        ---> CTRL + C pour stoper le serveur

Il faut retenir ici que ce serveur local php est bien, mais celui de symfony est mieux, notamment quant à Enabling TLS qui permet de passer toujours en HTTPS (sécurisé) 
Par exemple il suffit de lancer symfony server:ca:install pour installer sur l'ordinateur en local une autorité de certification.
7/ Une fois lancé par ce biais on peut simplement utiliser "symfony serve" et il sera en https. Toutefois pour garder la main sur le terminal il est interessant de le lancer avec "-d"
    Cela signifie qu'il va le lancer en demo et nous gardons la main sur le terminal.
8/ Pour arreter le serveur la commande est "symfony server:stop"


/---------------------------------------------------------------------------------------------------/
/                                                                                                   /
/                                       C H A P I T R E  4                                          /
/                                                                                                   /
/---------------------------------------------------------------------------------------------------/

1/ Route.yaml est un fichier qui permet de définir les routes : le premier élement est l'identifiant , vient ensuite une URL (path) et un controller (fonction qui va traiter cette URL) 
2/ Voir le fichier que l'on a nommé TestController qui nous a permis de vérifier si la route créée fonctionne bien.
3/  L'objet Request (voir avec un dump) possedes les propriétés $_"QQCH"(request pour POST, query pour GET, server pour SERVER, fils pour files et coockies pour cookies).
4/ Comment notre controller va pouvoir nous renvoyer une réponse ? Toutes les fonction qui prennent en charge des requetes doivent TOUJOURS TOUJOURS retourner une instence de la classe response qui vient du package HTTPFundation
5/ 
MAJ ===> Plutot que de mettre notre "$request = Request:: createFromGlobals();", on va désormais l'injecter en parametre de la fonction elle même (ici test en l'occurence) ==> Request $request

6/ Pour le chapitre en 4.1 il s'agit de comprendre que le query de notre requete peut etre remplacé par un des element qui figure dans le dump de l'objet Request(attributes,request,query,server,files etc)
    Du coup en remplaçant 'query' par 'attribute' on reussi a récupérer la valeur passé dans l'url
    A préciser que nous avons également ajouté "/{age}" à la suite de "path: "/test/" 
    Le probleme c'est qu'en ne mettant aucune valeur apres test il renvoit une erreur. Pour parer à ca il suffit de lui indiquer(fichier route) une valeur par defaut pour age.
    Aussi pour ne pas permettre de mettre autre chose qu'un integer il suffit de rajouter l'option "requirements" avec "age: \d+".
MA-GNI-FIQUE mais on peut faire plus court en integrant ces "defaults" et "requirements" directement dans le {age} ==> {age<\d+>?0}
Une derniere chose la dessus : on peut même virer "$age = $request->attributes->get("age", 0);" et mettre simplement en dernier parametre de la fonction $age

7/ On voit par la suite d'auter type d'options : methods(permet de définir quels types de méthods sont attendues(get, post etc)) // host(permet d'acceder a notre site que selon un certains typage)
Derniere chose pour vérifier http ou https on peut le param avec les schemes.

8/ Depuis le debut on a créé des configurations de routes dans le fichier route mais il est possible de le faire en créant des fichiers dans le dossier route pour mieux structurer ses chemin
Mais ce n'est pas tout puisque on peut l'intégrer directement en parametre :
    /*
    *@Route()
    */
    On clique droit sur route et on importe cette classe puis on clique sur annotation route.
    On place en parametre de Route() 1/ le chemi 2/ le nom 3/pas besoin de mettre le controller puisque on est deja au dessus de la fonction à appeller
    Là il y aura une erreur donc il faut installer des packages supplementaire (symfony flex)